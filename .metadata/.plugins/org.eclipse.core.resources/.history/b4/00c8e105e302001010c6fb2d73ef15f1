package edu.kh.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBCExample1 {
	
	public static void main(String[] args) {
		
		/*
		 * JDBC (Java DataBase Connectivity)
		 * 
		 * - Java에서 DB에 연결할 수 있게 해주는
		 * Java API (Java에서 제공하는 코드)
		 * -> java.sql 패키지에 존재
		 * 
		 * 
		 */
		
		// Java 코드를 이용해
		// Employee 테이블에서
		// 사번, 이름, 부서코드, 직급코드, 급여, 입사일 조회 후
		// 이클립스 콘솔에 출력
		
		/* 1. JDBC 객체 참조용 변수 선언 */
		
		// java.sql.Connection
		// 특정 DBMS와 연결하기 위한 정보를 저장한 객체
		// == DBeaver에서 사용하는 DB 연결과 같은 역할의 객체
		// (DB 서버 주소, 포트번호, DB 이름, 계정명, 비밀번호)
		Connection conn = null;
		
		// java.sql.Statement
		// - 1) SQL을 Java -> DB에 전달
		// - 2) DB에서 SQL 수행한 결과를 반환 받아옴(DB-> Java)
		Statement stmt = null;
		
		// java.sql.ResultSet
		// - SELECT 조회 결과를 저장하는 객체
		ResultSet rs = null;
		
		try {
			/* 2. DriverManager 객체를 이용해서 Connection 객체 생성하기 */
			// java.sql.DricerManager
			// - DB 연결 정보와 JDBC 드라이버를 이용해서
			// 	 원하는 DB와 연결할 수 있는 Connection 객체를 생성하는 객체
			
			// 2-1) Oracle JDBC Driver 객체를 메모리에 로드하기
			
			Class.forName("oracle.jdbc.driver.OracleDriver");
			// Class.forName("패키지명+클래스명");
			// - 해당 클래스를 읽어 메모리에 적재
			// -> JVM이 프로그램 동작에 사용할 객체를 생성하는 구문
			
			// oracle.jdbc.driver.OracleDriver
			// - Oracle DBMS 연결 시 필요한 코드가 담겨있는 클래스
			// 	 ojdbc 라이브러리 파일 내에 존재함
			//   Oracle에서 만들어서 제공하는 클래스
			
			// 2-2) DB 연결 정보 작성
			String type = "jdbc:oracle:thin:@"; //드라이버 종류
			
			String host = "localhost"; // DB 서버 컴퓨터의 IP 또는 도메인주소
										// localhost == 현재 컴퓨터
			String port = ":1521"; // 프로그램 연결을 위한 port 번호
			
			String dbName = ":XE"; // DBMS 이름(XE == eXpress Edition)
			
			// jdbc:oracle:thin:@localhost:1521:XE
			
			String userName = "kh"; // 사용자 계정명
			String password = "kh1234"; // 계정 비밀번호
			
			// 2-3) DB연결 정보와 DriverManager를 이용해서 Connection 객체 생성
			conn = DriverManager.getConnection(type + host + port + dbName,
														userName, password);
			
			// Connection 객체가 잘 생성되었는지 확인 (객체 주소 반환)
			System.out.println(conn);
			
			/* 3. SQL 작성 */
			// !! 주의사항 !!
			// -> JDBC 코드에서 SQL 작성 시
			//	  세미콜론(;) 작성 금지 !!!!
			// -> "sql 명령어가 올바르게 종료되지 않았습니다" 예외 발생
			
			// EMployee 테이블에서
			// 사번, 이름, 부서코드, 직급코드, 급여, 입사일 조회
			String sql = "SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, SALARY, HIRE_DATE "
					+ "FROM EMPLOYEE";
			
			/* 4. Statement 객체 생성 */
			stmt = conn.createStatement();
			// 연결된 DB에 SQL을 전달하고 결과를 반환 받을 역할을 할
			// Statement 객체 생성
			
			/* 5. Statement 객체를 이용해서 SQL 수행 후 결과 반환 받기 */
			// 1) ResultSet Statement.executeQuery(sql)
			// 	-> sql이 SELECT문일 때 결과로 ResultSet 객체 반환
			
			// 2) int Statement.executeUpdate(sql);
			// -> sql이 DML(INSERT, DELETE, UPDATE) 일 때 실행 메서드
			// -> 결과로 int 반환 (삽입, 수정, 삭제된 생의 개수)
			
			// 예) 1행이 업데이트 됐다, 10행이 업데이트 됐다.
			rs = stmt.executeQuery(sql);
			
		} catch (ClassNotFoundException e) { //경로 오입력 시 예외 발생
			System.out.println("해당 Class를 찾을 수 없습니다.");
			e.printStackTrace();
			
		} catch (SQLException e) {
			// SQLException : DB 연결과 관련된 모든 예외의 최상위 부모
			e.printStackTrace();
		}
		
		
		
		
		
		
	}

}
